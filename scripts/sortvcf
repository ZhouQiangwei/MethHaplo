#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use File::Spec;
print "\n";
my $path_curf = File::Spec->rel2abs(__FILE__);
#print "C PATH = ",$path_curf,"\n";
my ($vol, $dirs, $file) = File::Spec->splitpath($path_curf);
print "Program dir: ", $dirs,"\n";


my $opts = parse_params();
runmain($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg )
    {
        croak @msg;
    }
    die
        "Usage: methyhaplo -M [mode] -m methfile -s <sam>/-b <bam> -o outputprefix\n",
        "Options:\n",
        "   -M <string> [hap|asm]         methyhaolo analysis mode\n",
        "                                     hap: iterative approach, prefer longer haplotype results;\n",
        "                                     asm: hypergeometric approach, prefer accurate asm results.(default: hap);\n",
        "   -m, --methfile <file>         methratio file (requires)\n",
        "                                     format: chr  pos  strand  context  methlevel  methC  coverage\n",
        "   -o, --out <string>            output file prefix\n",
        "   -s, --sam <samfile>           sam file from batmeth2-align.  This file should be coordinate sorted, \n",
        "                                     using the <samtools sort> command, and must contain methylstatus[MD:Z:].\n",
        "   -b, --bam <bamfile>           bam file, should be coordinate sorted. (use this option or -s option but not both)\n",
        "   -v, --vcffile <file>          snp file\n",
        "   -c, --chromosomal-order       Use natural ordering (1,2,10,MT,X) rather then the default (1,10,2,MT,X). \n",
        "                                     This requires new version of the unix \"sort\" command which supports the --version-sort option.\n",
        "   -p, --parallel <int>          Change the number of sorts run concurrently to <int>\n",
        "   -t, --temporary-directory     Use a directory other than /tmp as the temporary directory for sorting.\n",
        "   -h, -?, --help                This help message.\n",
        "\n";
}

sub parse_params
{
    my $opts = {};
    if($#ARGV < 0){
        error();
    }
    while (my $arg=shift(@ARGV))
    {
        if ( $arg eq '-p' || $arg eq '--parallel-sort' ) { $$opts{parallel_sort}=shift(@ARGV); next; }
        if ( $arg eq '-c' || $arg eq '--chromosomal-order' ) { $$opts{chromosomal_order}=1; next; }
        if ( $arg eq '-o' || $arg eq '--out' ) { $$opts{output}=shift(@ARGV); next; }
        if ( $arg eq '-s' || $arg eq '--sam' ) { $$opts{samfile}=shift(@ARGV); next; }
        if ( $arg eq '-b' || $arg eq '--bam' ) { $$opts{bamfile}=shift(@ARGV); next; }
        if ( $arg eq '-M' ) { $$opts{mode}=shift(@ARGV); next; }
        if ($arg eq '-d') {sortvcf($opts); last;}
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if ( $arg eq '-t' || $arg eq '--temporary-directory' ) { $$opts{temp_dir}=shift(@ARGV); next; }
        if ( $arg eq '-m' || $arg eq '--methfile' ) { $$opts{methfile}=shift(@ARGV); next; }
        if ( $arg eq '-v' || $arg eq '--vcffile' ) { $$opts{vcffile}=shift(@ARGV); next; }
        #if ( -e $arg ) { $$opts{file}=$arg; next }
        error("Unknown parameter \"$arg\". Run -h for help.\n");
    }
    return $opts;
}

sub runmain
{
    my ($opts) = @_;
    
    my $cmd;
    if ( !exists($$opts{methfile}) ){
        print("Please define methratio file with -m paramater!\n");
        exit(1);
    }
    if($$opts{mode} eq "asm"){
        if( exists($$opts{samfile})){
            $cmd = "$dirs/methyhaplo -o $$opts{output} -m $$opts{methfile} -s $$opts{samfile}";
        }elsif( exists($$opts{bamfile})){
            $cmd = "$dirs/methyhaplo -o $$opts{output} -m $$opts{methfile} -b $$opts{bamfile}";
        }else{
            print("Please define alignment file with -s or -b paramater!\n");
            exit(1);
        }
        system($cmd) == 0 or die "failed: $!";
        $cmd = "$dirs/ASM -i $$opts{output}.plus.txt -o $$opts{output}.asm.plus";
        system($cmd) == 0 or die "failed: $!";
        $cmd = "$dirs/ASM -i $$opts{output}.neg.txt -o $$opts{output}.asm.neg";
        system($cmd) == 0 or die "failed: $!";
    }else{
        my $varfilep;
        my $varfilen;
        print("[Methyhaplo] process methfile!\n");
        if ( exists($$opts{vcffile}) )
        {
            print("[Methyhaplo] process methfile and vcf file!\n");
            $cmd = 'awk -v OFS="\t" \'$3=="+" && $6>=10 && ($7>=0.2 && $7<=0.8){print $1,$2,".\tC\tT\t600\tPASS\t.\tGT\t0/1"}\' ' . "$$opts{methfile} | cat $$opts{vcffile}  - | $path_curf -d > $$opts{methfile}.mrsnp.p";
            system($cmd) == 0 or die "failed: $!";
            $cmd = 'awk -v OFS="\t" \'$3=="-" && $6>=10 && ($7>=0.2 && $7<=0.8){print $1,$2,".\tG\tA\t600\tPASS\t.\tGT\t0/1"}\' ' . "$$opts{methfile} | cat $$opts{vcffile} - | $path_curf -d > $$opts{methfile}.mrsnp.n";
            system($cmd) == 0 or die "failed: $!";
            $varfilep = "$$opts{methfile}.mrsnp.p";
            $varfilen = "$$opts{methfile}.mrsnp.n";
        }else
        {
            $cmd = 'awk -v OFS="\t" \'$3=="+" && $6>=10 && ($7>=0.2 && $7<=0.8){print $1,$2,".\tC\tT\t600\tPASS\t.\tGT\t0/1"}\' ' . "$$opts{methfile} > $$opts{methfile}.p";
            system($cmd) == 0 or die "failed: $!";
            $cmd = 'awk -v OFS="\t" \'$3=="-" && $6>=10 && ($7>=0.2 && $7<=0.8){print $1,$2,".\tG\tA\t600\tPASS\t.\tGT\t0/1"}\' ' . "$$opts{methfile} > $$opts{methfile}.n";
            system($cmd) == 0 or die "failed: $!";
            $varfilep = "$$opts{methfile}.p";
            $varfilen = "$$opts{methfile}.n";
        }
        ##done split meth and sort vcf; next, process hap
        my $newFile;
        print("[Methyhaplo] split bamfile by alignment strand!\n");
        if( exists($$opts{samfile})){
            $cmd = "$dirs/bamStrand $$opts{samfile}";
            $newFile = $$opts{samfile};
            $newFile =~ s/.sam$//;
        }elsif( exists($$opts{bamfile})){
            $cmd = "$dirs/bamStrand $$opts{bamfile}";
            $newFile = $$opts{samfile};
            $newFile =~ s/.bam$//;
        }else{
            print("Please define alignment file with -s or -b paramater!\n");
            exit(1);
        }
        system($cmd) == 0 or die "failed: $!";

        print("[Methyhaplo] Haplotype assembly with plus strand DNA methylation information!\n");
        ## plus hap
        $cmd = "$dirs/extracthairs --bam $newFile.p.bam --VCF $varfilep --out $$opts{output}.p.fragment";
        system($cmd) == 0 or die "failed: $!";
        $cmd = "$dirs/hapcut2 --fragments $$opts{output}.p.fragment --vcf $varfilep --output $$opts{output}.p.haplo";
        system($cmd) == 0 or die "failed: $!";
        ## neg 
        print("[Methyhaplo] Haplotype assembly with neg strand DNA methylation information!\n");
        $cmd = "$dirs/extracthairs --bam $newFile.n.bam --VCF $varfilen --out $$opts{output}.n.fragment";
        system($cmd) == 0 or die "failed: $!";
        $cmd = "$dirs/hapcut2 --fragments $$opts{output}.n.fragment --vcf $varfilen --output $$opts{output}.n.haplo";
        system($cmd) == 0 or die "failed: $!";
        $cmd = "rm $$opts{output}.n.fragment && rm $$opts{output}.p.fragment";
        system($cmd) == 0 or die "failed: $!";
        print("[Methyhaplo] Haplotype assembly merge strand files!\n");
        $cmd = "$dirs/bsmerge $$opts{output}.p.haplo $$opts{output}.n.haplo > $$opts{output}.haplo";
        system($cmd) == 0 or die "failed: $!";
        print("[Methyhaplo] done!\n");
    }

}

sub sortvcf{
    my ($opts) = @_;
    my $fh;
    if ( exists($$opts{file}) )
    {
        if ( $$opts{file}=~/\.gz$/i )
        {
            open($fh,"gunzip -c $$opts{file} |") or error("$$opts{file}: $!");
        }
        else
        {
            open($fh,'<',$$opts{file}) or error("$$opts{file}: $!");
        }
    }
    else { $fh = *STDIN; }

    my $sort_opts = check_sort_options($opts);
    my $cmd;
    if ( exists($$opts{temp_dir}) )
    {
        $cmd = "sort $sort_opts -T $$opts{temp_dir} -k2,2n";    
    }
    else
    {
        $cmd = "sort $sort_opts -k2,2n";
    }
    print STDERR "$cmd\n";
    open(my $sort_fh,"| $cmd") or error("$cmd: $!");

    my $unflushed = select(STDOUT); 
    $| = 1; 
    while (my $line=<$fh>)
    {
        if ( $line=~/^#/ ) { print $line; next; }
        print $sort_fh $line;
        last;
    }
    select($unflushed);
    while (my $line=<$fh>)
    {
        print $sort_fh $line;
    }
}

sub check_sort_options
{
    my ($opts) = @_;

    my $sort_opts = join('',`sort --help`);
    my $has_version_sort = ( $sort_opts=~/\s+--version-sort\s+/ ) ? 1 : 0;
    my $has_parallel_sort = ( $sort_opts=~/\s+--parallel=/ ) ? 1 : 0;

    if ( $$opts{chromosomal_order} && !$has_version_sort ) 
    {
        error("Old version of sort command installed, please run without the -c option.\n");
    }
    if ( $$opts{parallel_sort} && !$has_version_sort ) 
    {
        error("Old version of sort command installed, please run without the -p option.\n");
    }
    $sort_opts  = ( $$opts{chromosomal_order} && $has_version_sort ) ? '-k1,1V' : '-k1,1d';
    if ( $$opts{parallel_sort} && $has_parallel_sort ) { $sort_opts .= " --parallel $$opts{parallel_sort}"; }
    
    return $sort_opts;
}

